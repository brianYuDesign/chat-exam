{"version":3,"sources":["Home/Home.jsx","utils.js","useUser.js","ChatRoom/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","React","useState","username","setUsername","className","type","placeholder","value","onChange","event","target","to","JSON","stringify","process","backendUrl","useUser","user","setUser","useEffect","fetch","then","response","json","data","ChatRoom","props","match","params","chatId","messages","setMessages","newMessage","setNewMessage","socketRef","useRef","current","socketIOClient","query","on","disconnect","a","url","console","log","fetchData","id","chatList","map","item","index","key","name","src","alt","client","moment","updatedAt","fromNow","sort","b","createdAt","valueOf","message","i","userId","content","rows","onClick","emit","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6072cb21.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  return (\n    <div className=\"home-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Please typing username(user1, user2, user3, user4)\"\n        value={username}\n        onChange={handleUsernameChange}\n        className=\"text-input-field\"\n      />\n      <Link to={`/user/${username}`} className=\"enter-room-button\">\n        enter\n      </Link>\n      {JSON.stringify(process.env)}\n    </div>\n  );\n};\n\nexport default Home;\n","export const backendUrl = process.env.REACT_APP_API_URL;\n","import { useEffect, useState } from \"react\";\nimport { backendUrl } from \"./utils\";\n\nconst useUser = (username) => {\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    fetch(backendUrl + \"/user/\" + username)\n      .then((response) => response.json())\n      .then((data) => {\n        setUser(data);\n      });\n    return () => {};\n  }, [username]);\n\n  return { user };\n};\n\nexport default useUser;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport moment from \"moment\";\nimport \"./ChatRoom.css\";\nimport useUser from \"../useUser\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { backendUrl } from \"../utils\";\n\nconst ChatRoom = (props) => {\n  const { username, chatId } = props.match.params;\n  const { user } = useUser(username);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(backendUrl, {\n      query: { chatId },\n    });\n\n    socketRef.current.on(\"CREATE_MESSAGE\", (newMessage) => {\n      setMessages((messages) => [newMessage, ...messages]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [chatId]);\n\n  const sendMessage = (content) => {\n    socketRef.current.emit(\"SEND_MESSAGE\", {\n      chatId: chatId,\n      userId: user.id,\n      content: content,\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `${backendUrl}/chat/${chatId}`;\n\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setMessages(data);\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n    };\n\n    if (chatId) {\n      fetchData();\n    }\n  }, [chatId]);\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"container clearfix\">\n      <div className=\"people-list\" id=\"people-list\">\n        <ul className=\"list\">\n          {user?.chatList?.map((item, index) => (\n            <>\n              <Link\n                className=\"clearfix\"\n                key={`c_${index}`}\n                to={`/user/${user.name}/${item.id}`}\n              >\n                <img\n                  src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg\"\n                  alt=\"avatar\"\n                />\n                <div className=\"about\">\n                  <div className=\"name\">{item.client.name}</div>\n                  <div className=\"status\">\n                    <i className=\"fa fa-circle online\"></i>{\" \"}\n                    {moment(item.updatedAt).fromNow()}\n                  </div>\n                </div>\n              </Link>\n            </>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"chat\">\n        <div className=\"chat-history\">\n          <ul>\n            {messages\n              ?.sort(\n                (a, b) =>\n                  moment(a.createdAt).valueOf() - moment(b.createdAt).valueOf()\n              )\n              .map((message, i) => (\n                <li\n                  key={message.id}\n                  className={`${message.userId === user.id ? \"\" : \"clearfix\"}`}\n                >\n                  <div\n                    className={`message-data ${\n                      message.userId === user.id ? \"\" : \"align-right\"\n                    }`}\n                  >\n                    <span className=\"message-data-time\">\n                      {moment(message.createdAt).fromNow()}\n                    </span>\n                    &nbsp; &nbsp;\n                    <span className=\"message-data-name\">{}</span>{\" \"}\n                    <i className=\"fa fa-circle me\"></i>\n                  </div>\n                  <div\n                    className={`message  ${\n                      message.userId === user.id\n                        ? \"my-message\"\n                        : \"other-message float-right\"\n                    }`}\n                  >\n                    {message.content}\n                  </div>\n                </li>\n              ))}\n          </ul>\n        </div>\n\n        <div className=\"chat-message clearfix\">\n          <textarea\n            value={newMessage}\n            onChange={handleNewMessageChange}\n            name=\"message-to-send\"\n            id=\"message-to-send\"\n            placeholder=\"Type your message\"\n            rows=\"3\"\n          ></textarea>\n          <i className=\"fa fa-file-o\"></i> &nbsp;&nbsp;&nbsp;\n          <i className=\"fa fa-file-image-o\"></i>\n          <button onClick={handleSendMessage} className=\"send-message-button\">\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n\n    // <div className=\"chat-room-container\">\n    //   {!user.id && <h1> user not found</h1>}\n    //   <h1 className=\"room-name\">User: {username}</h1>\n\n    //   {user?.chatList?.map((item, index) => (\n    //     <>\n    //       <Link\n    //         key={`c_${index}`}\n    //         to={`/user/${user.name}/${item.id}`}\n    //         className=\"button\"\n    //       >\n    //         <p>{item.id}</p>\n    //         <p>{item.lastMessage}</p>\n    //         enter room\n    //       </Link>\n    //     </>\n    //   ))}\n\n    //   {chatId && (\n    //     <>\n    //       <h1 className=\"room-name\">Room: {chatId}</h1>\n    //       <div className=\"messages-container\">\n    //         <ol className=\"messages-list\">\n    //           {messages?.map((message, i) => (\n    //             <li\n    //               key={message.id}\n    //               className={`message-item ${\n    //                 message.userId === user.id\n    //                   ? \"my-message\"\n    //                   : \"received-message\"\n    //               }`}\n    //             >\n    //               {message.content}\n    //             </li>\n    //           ))}\n    //         </ol>\n    //       </div>\n    //       <textarea\n    //         value={newMessage}\n    //         onChange={handleNewMessageChange}\n    //         placeholder=\"Write message...\"\n    //         className=\"new-message-input-field\"\n    //       />\n    //       <button onClick={handleSendMessage} className=\"send-message-button\">\n    //         Send\n    //       </button>\n    //     </>\n    //   )}\n    // </div>\n  );\n};\n\nexport default ChatRoom;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/user/:username/:chatId\" component={ChatRoom} />\n        <Route path=\"/user/:username\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}