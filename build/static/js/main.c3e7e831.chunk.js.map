{"version":3,"sources":["Home/Home.jsx","useUser.js","ChatRoom/ChatRoom.jsx","utils.js","App.js","serviceWorker.js","index.js"],"names":["Home","React","useState","username","setUsername","className","type","placeholder","value","onChange","event","target","to","useUser","user","setUser","useEffect","fetch","SERVER_URL","then","response","json","data","ChatRoom","props","match","params","chatId","messages","setMessages","newMessage","setNewMessage","socketRef","useRef","current","socketIOClient","process","query","on","disconnect","a","url","console","log","fetchData","id","chatList","map","item","index","key","name","lastMessage","message","i","userId","content","onClick","emit","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c3e7e831.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  return (\n    <div className=\"home-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        value={username}\n        onChange={handleUsernameChange}\n        className=\"text-input-field\"\n      />\n      <Link to={`/user/${username}`} className=\"enter-room-button\">\n        enter\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useEffect, useState } from \"react\";\n\nconst SERVER_URL = \"http://localhost:3000\";\n\nconst useUser = (username) => {\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    fetch(SERVER_URL + \"/user/\" + username)\n      .then((response) => response.json())\n      .then((data) => {\n        setUser(data);\n      });\n    return () => {};\n  }, [username]);\n\n  return { user };\n};\n\nexport default useUser;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./ChatRoom.css\";\nimport useUser from \"../useUser\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { backendUrl } from \"../utils\";\n\nconst ChatRoom = (props) => {\n  const { username, chatId } = props.match.params;\n  const { user } = useUser(username);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(backendUrl, {\n      query: { chatId },\n    });\n\n    socketRef.current.on(\"CREATE_MESSAGE\", (newMessage) => {\n      setMessages((messages) => [newMessage, ...messages]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [chatId]);\n\n  const sendMessage = (content) => {\n    socketRef.current.emit(\"SEND_MESSAGE\", {\n      chatId: chatId,\n      userId: user.id,\n      content: content,\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `${backendUrl}chat/${chatId}`;\n\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setMessages(data);\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n    };\n\n    if (chatId) {\n      fetchData();\n    }\n  }, [chatId]);\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"chat-room-container\">\n      {!user.id && <h1> user not found</h1>}\n\n      {user?.chatList?.map((item, index) => (\n        <>\n          <Link\n            key={`c_${index}`}\n            to={`/user/${user.name}/${item.id}`}\n            className=\"button\"\n          >\n            <p>{item.id}</p>\n            <p>{item.lastMessage}</p>\n            enter room\n          </Link>\n        </>\n      ))}\n\n      {chatId && (\n        <>\n          <h1 className=\"room-name\">Room: {chatId}</h1>\n          <div className=\"messages-container\">\n            <ol className=\"messages-list\">\n              {messages?.map((message, i) => (\n                <li\n                  key={message.id}\n                  className={`message-item ${\n                    message.userId === user.id\n                      ? \"my-message\"\n                      : \"received-message\"\n                  }`}\n                >\n                  {message.content}\n                </li>\n              ))}\n            </ol>\n          </div>\n          <textarea\n            value={newMessage}\n            onChange={handleNewMessageChange}\n            placeholder=\"Write message...\"\n            className=\"new-message-input-field\"\n          />\n          <button onClick={handleSendMessage} className=\"send-message-button\">\n            Send\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","export const backendUrl = process.env.REACT_APP_API_URL;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/user/:username/:chatId\" component={ChatRoom} />\n        <Route path=\"/user/:username\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}